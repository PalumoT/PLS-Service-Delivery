<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_novrp_pls_service_request</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_novrp_pls_service_request">stateCHANGESTO2^stateCHANGESFROM1^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESTO" or="false" value="2"/>
            <item endquery="false" field="state" goto="false" newquery="false" operator="CHANGESFROM" or="false" value="1"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>NVS - Create  Service Request Tasks</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	generateTasks(current);
	
	function generateTasks(request){
		if(request.catalog_item == ""){
			return;
		}
		
		var tasks = getActivities("catalog_item=" + request.catalog_item);
		var start = request.getValue("planned_start_date");
		
		if(tasks.length == 0){
			gs.addInfoMessage("No task configured for the item " +
							  request.getDisplayValue("catalog_item"));
		}
		
		processTasks(start, current.getUniqueValue(), tasks);
	}
	
	function processTasks(start, parent, tasks){
		if(!parent || !tasks){
			return;
		}
		
		var estimated_efforts = 0;
		
		for(var j=0; j<tasks.length; j++){
			var task = tasks[j];
			task.planned_start_date = start;

			var glideActivity = createTask(parent, task);
			
			if(task.subtasks.length > 0){
				var result = processTasks(start, glideActivity.getUniqueValue(), task.subtasks);
				glideActivity.setValue("estimated_efforts_hours", result.efforts);
				glideActivity.setValue("planned_end_date", result.start);
				glideActivity.update();
			}
			
			estimated_efforts +=
				parseInt(glideActivity.getValue("estimated_efforts_hours"));
			start = glideActivity.getValue("planned_end_date");
		}
		
		return {"start": start, "efforts": estimated_efforts};
	}
	
	function getActivities(encodedQuery){
		var result = [];
		
		if(encodedQuery == ""){
			return [];
		}
		
		var glideTask = new GlideRecord("x_novrp_pls_catalog_item_task");
		glideTask.addEncodedQuery(encodedQuery);
		glideTask.orderBy("order");
		glideTask.query();
		
		while(glideTask.next()){
			var activity = {
				"order": glideTask.getValue("order"),
				"short_description": glideTask.getValue("short_description"),
				"subtasks": []
			};
			
			if(glideTask.getValue("subtasks") > 0){
				var subtasks = getActivities("top_task=" + glideTask.getUniqueValue());
				gs.info("subtasks :" + subtasks.length);
				activity.subtasks = subtasks;
			}else{
				activity.estimated_efforts_hours = glideTask.getValue("estimated_efforts_hours");
				activity.assignment_group = glideTask.getValue("assignment_group");
			}
			
			result.push(activity);
		}
		
		return result;
	}
	
	function createTask(top_task, task){
		var glideServiceRequestTask = new GlideRecord("x_novrp_pls_sr_task");
		glideServiceRequestTask.newRecord();
		glideServiceRequestTask.top_task = top_task;
		glideServiceRequestTask.short_description = task.short_description;
		
		glideServiceRequestTask.order = task.order;
		glideServiceRequestTask.estimated_efforts_hours = task.estimated_efforts_hours;
		glideServiceRequestTask.assignment_group = task.assignment_group;
		
		if(task.planned_start_date){
			var dateTimeHelper = new DateTimeHelper();
			var end = dateTimeHelper.calculateEndDate(
			task.planned_start_date,
			task.estimated_efforts_hours);
			
			glideServiceRequestTask.planned_start_date = task.planned_start_date;
			glideServiceRequestTask.planned_end_date = end;
		}
		
		glideServiceRequestTask.insert();
		
		return glideServiceRequestTask;
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>GALMOPA1</sys_created_by>
        <sys_created_on>2017-06-21 13:08:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>f5093b284f27b28062b50fbf0310c7ee</sys_id>
        <sys_mod_count>19</sys_mod_count>
        <sys_name>NVS - Create  Service Request Tasks</sys_name>
        <sys_overrides/>
        <sys_package display_value="Novartis  PLS Service Delivery Management" source="x_novrp_pls">00c705cf4f9a724462b50fbf0310c7ad</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Novartis  PLS Service Delivery Management">00c705cf4f9a724462b50fbf0310c7ad</sys_scope>
        <sys_update_name>sys_script_f5093b284f27b28062b50fbf0310c7ee</sys_update_name>
        <sys_updated_by>GALMOPA1</sys_updated_by>
        <sys_updated_on>2017-06-22 13:26:41</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=f5093b284f27b28062b50fbf0310c7ee"/>
</record_update>
